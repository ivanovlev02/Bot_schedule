#systemctl start telebot_1

# v1.0.0 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ
# v1.1.0 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
# v1.1.1 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
# v1.2.0 - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


import telebot
import requests
import urllib.request
import random
import tg_analytic
import csv

from telebot import types
from bs4 import BeautifulSoup
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

TOKEN = ""
ID_ADMIN = ""

bot = telebot.TeleBot(TOKEN)

HELP = """
–ë–û–¢ "–†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–¢ –°–ò–ë–ì–£–¢–ò"
!–†–ê–°–ü–ò–°–ê–ù–ò–ï –í–´–í–û–î–ò–¢–°–Ø –¢–û–õ–¨–ö–û –î–õ–Ø –ò–ù–°–¢–ò–¢–£–¢–ê –¢–ï–õ–ï–ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ô!

/help - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
/groups - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
/calls - –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤

–ë–æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.
–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É ‚öôÔ∏è
@lc_local

v1.2.0
 """

CALLS = """
1Ô∏è‚É£ 8:00-9:35
üí©15 –º–∏–Ω—É—Çüí©
2Ô∏è‚É£ 9:50-11:25
üí©15 –º–∏–Ω—É—Çüí©
3Ô∏è‚É£ 11:40-13:15
üí©30 –º–∏–Ω—É—Çüí©
4Ô∏è‚É£ 13:45-15:20
üí©15 –º–∏–Ω—É—Çüí©
5Ô∏è‚É£ 15:35-17:10
üí©15 –º–∏–Ω—É—Çüí©
6Ô∏è‚É£ 17:25-19:00
"""

LINK = "https://sibsutis.ru/students/study/%D0%A0%D0%B0%D1%81%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%BE%D1%87%D0%BD%D0%BE%D0%B9%20%D1%84%D0%BE%D1%80%D0%BC%D1%8B%20%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F/2022-2023%20%D1%83%D1%87.%D0%B3%D0%BE%D0%B4/I%20%D0%BF%D0%BE%D0%BB%D1%83%D0%B3%D0%BE%D0%B4%D0%B8%D0%B5%202022-2023%20%D1%83%D1%87.%D0%B3%D0%BE%D0%B4_/%D0%98%D0%A2/1%20%D0%BA%D1%83%D1%80%D1%81"

list_link = []
list_name = []
list_size = []
list_owner = []
list_datemodify = []

@bot.message_handler(commands=["database"])
def answer(message):
    if (message.from_user.id == ID_ADMIN):
        bot.send_document(ID_ADMIN, document=open('/home/lev/bot_schedule/data.csv'))

@bot.message_handler(commands=['groups'])
def groups(message):
    tg_analytic.statistics(message.from_user.id, message.text)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton(list_name[0].replace('.docx', ''))
    btn2 = types.KeyboardButton(list_name[1].replace('.docx', ''))
    btn3 = types.KeyboardButton(list_name[2].replace('.docx', ''))
    btn4 = types.KeyboardButton(list_name[3].replace('.docx', ''))
    btn5 = types.KeyboardButton(list_name[4].replace('.docx', ''))
    btn6 = types.KeyboardButton(list_name[5].replace('.docx', ''))
    btn7 = types.KeyboardButton(list_name[6].replace('.docx', ''))
    btn8 = types.KeyboardButton(list_name[7].replace('.docx', ''))
    btn9 = types.KeyboardButton(list_name[8].replace('.docx', ''))
    btn10 = types.KeyboardButton(list_name[9].replace('.docx', ''))
    btn11 = types.KeyboardButton(list_name[10].replace('.docx', ''))
    btn12 = types.KeyboardButton(list_name[11].replace('.docx', ''))
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10, btn11, btn12)
    bot.send_message(message.chat.id, text="–ù—É –ø—Ä–∏–≤–µ—Ç, {0.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—ã–Ω–æ–∫)0".format(message.from_user), reply_markup=markup)

@bot.message_handler(commands=['calls'])
def calls(message):
    tg_analytic.statistics(message.from_user.id, message.text)
    bot.send_message(message.chat.id, text="üëÄ")
    bot.send_message(message.chat.id, text=CALLS)


@bot.callback_query_handler(func=lambda call: True)
def handle(call):
    if (str(call.data) == list_name[0]):
        text = list_name[0].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[0] + "\n–†–∞–∑–º–µ—Ä: " + list_size[0] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[0]
        bot.answer_callback_query(call.id, show_alert=True, text=text)

    if (str(call.data) == list_name[1]):
        text = list_name[1].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[1] + "\n–†–∞–∑–º–µ—Ä: " + list_size[1] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[1]
        bot.answer_callback_query(call.id, show_alert=True, text=text)

    if (str(call.data) == list_name[2]):
        text = list_name[2].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[2] + "\n–†–∞–∑–º–µ—Ä: " + list_size[2] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[2]
        bot.answer_callback_query(call.id, show_alert=True, text=text)

    if (str(call.data) == list_name[3]):
        text = list_name[3].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[3] + "\n–†–∞–∑–º–µ—Ä: " + list_size[3] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[3]
        bot.answer_callback_query(call.id, show_alert=True, text=text)

    if (str(call.data) == list_name[4]):
        text = list_name[4].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[4] + "\n–†–∞–∑–º–µ—Ä: " + list_size[4] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[4]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    if (str(call.data) == list_name[5]):
        text = list_name[5].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[5] + "\n–†–∞–∑–º–µ—Ä: " + list_size[5] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[5]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    if (str(call.data) == list_name[6]):
        text = list_name[6].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[6] + "\n–†–∞–∑–º–µ—Ä: " + list_size[6] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[6]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    if (str(call.data) == list_name[7]):
        text = list_name[7].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[7] + "\n–†–∞–∑–º–µ—Ä: " + list_size[7] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[7]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    if (str(call.data) == list_name[8]):
        text = list_name[8].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[8] + "\n–†–∞–∑–º–µ—Ä: " + list_size[8] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[8]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    if (str(call.data) == list_name[9]):
        text = list_name[9].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[9] + "\n–†–∞–∑–º–µ—Ä: " + list_size[9] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[9]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    if (str(call.data) == list_name[10]):
        text = list_name[10].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[10] + "\n–†–∞–∑–º–µ—Ä: " + list_size[10] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[10]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    if (str(call.data) == list_name[11]):
        text = list_name[11].replace('.docx', '') + "\n–ê–≤—Ç–æ—Ä: " + list_owner[11] + "\n–†–∞–∑–º–µ—Ä: " + list_size[11] + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " + list_datemodify[11]
        bot.answer_callback_query(call.id, show_alert=True, text=text)
    bot.answer_callback_query(call.id)


@bot.message_handler(content_types=['text'])
def func(message):
    tg_analytic.statistics(message.from_user.id, message.text)
    markup = types.InlineKeyboardMarkup()
    if(message.text == list_name[0].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[0]))
        bot.send_message(message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞...")
        url_download = list_link[0]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[0], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[0], 'rb'), reply_markup=markup)

    elif(message.text == list_name[1].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[1]))
        bot.send_message(message.chat.id, text="–ù–µ –Ω—É–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏!")
        url_download = list_link[1]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[1], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[1], 'rb'), reply_markup=markup)

    elif(message.text == list_name[2].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[2]))
        bot.send_message(message.chat.id, text="–•–æ—á–µ—à—å —Å–ª–æ–≤–∏—Ç—å –ø–µ—Ä–¥–µ—á–Ω—ã–π —Å—Ä–∏—Å—Ç—É–ø?")
        url_download = list_link[2]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[2], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[2], 'rb'), reply_markup=markup)

    elif(message.text == list_name[3].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[3]))
        bot.send_message(message.chat.id, text="–Ø –Ω–µ —Å–æ–≤–µ—Ç—É—é —Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ...")
        url_download = list_link[3]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[3], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[3], 'rb'), reply_markup=markup)

    elif(message.text == list_name[4].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[4]))
        bot.send_message(message.chat.id, text="–ë–µ–≥–∏...")
        url_download = list_link[4]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[4], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[4], 'rb'), reply_markup=markup)

    elif(message.text == list_name[5].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[5]))
        bot.send_message(message.chat.id, text="–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞)")
        url_download = list_link[5]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[5], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[5], 'rb'), reply_markup=markup)

    elif(message.text == list_name[6].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[6]))
        bot.send_message(message.chat.id, text="–ú–æ–∂–µ—Ç –Ω–µ —Å—Ç–æ–∏—Ç?")
        url_download = list_link[6]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[6], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[6], 'rb'), reply_markup=markup)

    elif(message.text == list_name[7].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[7]))
        bot.send_message(message.chat.id, text="–ù—É –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Ç–∞–º")
        url_download = list_link[7]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[7], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[7], 'rb'), reply_markup=markup)

    elif(message.text == list_name[8].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[8]))
        bot.send_message(message.chat.id, text="–ß–µ–∫–∞–π –ø–æ–∫–∞ –≥–æ—Ä—è—á–µ–µ")
        url_download = list_link[8]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[8], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[8], 'rb'), reply_markup=markup)

    elif(message.text == list_name[9].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[9]))
        bot.send_message(message.chat.id, text="–ü–æ–º—è–Ω–µ–º")
        url_download = list_link[9]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[9], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[9], 'rb'), reply_markup=markup)

    elif(message.text == list_name[10].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[10]))
        bot.send_message(message.chat.id, text="–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ, —á—Ç–æ —Ä–∞–∑–±—É–¥–∏–ª –º–µ–Ω—è")
        url_download = list_link[10]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[10], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[10], 'rb'), reply_markup=markup)

    elif(message.text == list_name[11].replace('.docx', '')):
        markup.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=list_name[11]))
        bot.send_message(message.chat.id, text="–Ø —É—Å—Ç–∞–ª")
        url_download = list_link[11]
        myfile = requests.get(url_download, verify=False)
        open('/home/lev/bot_schedule/schedule/' + list_name[11], 'wb').write(myfile.content)
        bot.send_document(message.chat.id, document=open('/home/lev/bot_schedule/schedule/' + list_name[11], 'rb'), reply_markup=markup)

    elif(message.text == "/help" or message.text == "/start"):
        bot.send_message(message.chat.id, HELP)
    else:
        bot.send_message(message.chat.id, text="–ò–∑–≤–∏–Ω–∏—Å—å...")


def main():
    link = LINK
    print(get_data(get_html(link)))

def get_html(link):
    response = requests.get(link, verify=False)
    return response.text

def get_data(html):
    soup = BeautifulSoup(html, 'lxml')

    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –∏ –∑–∞–ø–∏—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏
    for a in soup.find_all('a', class_='element-title'):
        #print(a.get('data-bx-src'))
        list_link.append(a.get('data-bx-src'))
        list_name.append(a.text)
        list_size.append(a.get('data-bx-size'))
        list_owner.append(a.get('data-bx-owner'))
        list_datemodify.append(a.get('data-bx-datemodify'))

    for link in range(len(list_link)):
        list_link[link] = 'https://sibsutis.ru' + list_link[link]
    print(list_link)

if __name__ == '__main__':
    main()
    # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º
    bot.polling(none_stop=True)
